/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/auth/validate": {
    /**
     * Validate JWT
     * @description Validate a JWT token
     */
    get: operations["validateJWT"];
  };
  "/v1/models": {
    /** Create a new model */
    post: operations["createModel"];
  };
  "/v1/user/models": {
    /** Get paginated models */
    get: operations["getModels"];
  };
  "/v1/models/search": {
    /** Search for models */
    get: operations["searchModels"];
  };
  "/v1/user/shared-models": {
    /** Get paginated shared models */
    get: operations["getSharedModels"];
  };
  "/v1/models/{id}": {
    /**
     * Get a Model
     * @description Retrieve a single model by its ID
     */
    get: operations["getModelById"];
    /**
     * Delete a Model
     * @description Delete a single model by its ID
     */
    delete: operations["deleteModelById"];
  };
  "/v1/models/legacy/{id}": {
    /**
     * Get a legacy model
     * @description Retrieve a single model by its ID
     */
    get: operations["getLegacyModelById"];
  };
  "/v1/models/{modelId}/predict": {
    /**
     * Predict with Model
     * @description Submit a dataset for prediction using a specific model
     */
    post: operations["predictWithModel"];
  };
  "/v1/models/{modelId}/predict/csv": {
    /**
     * Predict using CSV with Model
     * @description Submit a dataset for prediction using a specific model
     */
    post: operations["predictWithModelCSV"];
  };
  "/v1/models/{id}/partial": {
    /** Partially update specific fields of a model */
    patch: operations["partiallyUpdateModel"];
  };
  "/v1/models/{modelId}/features/{featureId}": {
    /**
     * Update a feature for a specific model
     * @description Update the name, description, and feature type of an existing feature within a specific model
     */
    patch: operations["partiallyUpdateModelFeature"];
  };
  "/v1/user/datasets": {
    /**
     * Get Datasets by User ID
     * @description Retrieve all datasets associated with a specific user ID
     */
    get: operations["getDatasets"];
  };
  "/v1/datasets/{id}": {
    /**
     * Get a Dataset
     * @description Retrieve a single dataset by its ID
     */
    get: operations["getDatasetById"];
  };
  "/v1/organizations": {
    /** Get all organizations for a specific user */
    get: operations["getAllOrganizationsForUser"];
    /** Create a new organization */
    post: operations["createOrganization"];
  };
  "/v1/user/organizations": {
    /** Get all user organizations */
    get: operations["getAllOrganizationsByUser"];
  };
  "/v1/organizations/{id}/partial": {
    /** Partially update an existing organization */
    patch: operations["partialUpdateOrganization"];
  };
  "/v1/organizations/{name}": {
    /** Get organization by name */
    get: operations["getOrganizationByName"];
  };
  "/v1/organizations/{orgName}/invitations": {
    /**
     * Get all invitations for an organization
     * @description This endpoint allows an organization admin to get all invitations for their organization.
     */
    get: operations["getAllInvitations"];
    /**
     * Create new invitations for an organization
     * @description This endpoint allows an organization admin to create new invitations for users.
     */
    post: operations["createInvitations"];
  };
  "/v1/organizations/{orgId}/invitations/{id}/resend": {
    /**
     * Resend an invitation email
     * @description This endpoint allows an organization admin to resend an invitation email if it has not expired. Only organization admins can access this endpoint.
     */
    post: operations["resendInvitation"];
  };
  "/v1/organizations/{orgName}/affiliated-models": {
    /**
     * Get all models affiliated with an organization
     * @description This endpoint allows users to retrieve all models affiliated with a specific organization.
     */
    get: operations["getAllAffiliatedModels"];
  };
  "/v1/organizations/{name}/invitations/{uuid}": {
    /**
     * Get the status of an invitation
     * @description This endpoint allows a user to check the status of an invitation.
     */
    get: operations["getInvitation"];
    /**
     * Update the status of an invitation
     * @description This endpoint allows a user to update the status of an invitation.
     */
    put: operations["updateInvitation"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Model: {
      /**
       * Format: int64
       * @example 0
       */
      id?: number;
      /** @description A JSON object containing meta information. */
      meta?: {
        [key: string]: Record<string, never>;
      };
      /** @example My Model */
      name: string;
      /** @example A description of your model */
      description?: string;
      type: components["schemas"]["ModelType"];
      /** @example 1.0.0 */
      jaqpotpyVersion: string;
      libraries: components["schemas"]["Library"][];
      dependentFeatures: components["schemas"]["Feature"][];
      independentFeatures: components["schemas"]["Feature"][];
      sharedWithOrganizations?: components["schemas"]["Organization"][];
      visibility: components["schemas"]["ModelVisibility"];
      /** @example false */
      pretrained?: boolean;
      /**
       * Format: byte
       * @description A base64 representation of the actual model.
       */
      actualModel: string;
      creator?: components["schemas"]["User"];
      /** @description If the current user can edit the model */
      canEdit?: boolean;
      isAdmin?: boolean;
      affiliatedOrganizations?: components["schemas"]["Organization"][];
      tags?: string;
      legacyPredictionService?: string;
      /**
       * Format: date-time
       * @description The date and time when the feature was created.
       * @example 2023-01-01T12:00:00Z
       */
      createdAt?: Record<string, never>;
      /**
       * @description The date and time when the feature was last updated.
       * @example 2023-01-01T12:00:00Z
       */
      updatedAt?: Record<string, never>;
    };
    ModelSummary: {
      /**
       * Format: int64
       * @example 0
       */
      id: number;
      /** @example My Model */
      name: string;
      visibility: components["schemas"]["ModelVisibility"];
      /** @example A description of your model */
      description?: string;
      creator?: components["schemas"]["User"];
      type: components["schemas"]["ModelType"];
      dependentFeaturesLength?: number;
      independentFeaturesLength?: number;
      sharedWithOrganizations: components["schemas"]["OrganizationSummary"][];
      /**
       * Format: date-time
       * @description The date and time when the feature was created.
       * @example 2023-01-01T12:00:00Z
       */
      createdAt: Record<string, never>;
      /**
       * @description The date and time when the feature was last updated.
       * @example 2023-01-01T12:00:00Z
       */
      updatedAt?: Record<string, never>;
    };
    OrganizationSummary: {
      /**
       * Format: int64
       * @example 0
       */
      id: number;
      /** @example My Organization */
      name: string;
    };
    /** @enum {string} */
    ModelType: "SKLEARN" | "TORCH" | "R_BNLEARN_DISCRETE" | "R_CARET" | "R_GBM" | "R_NAIVE_BAYES" | "R_PBPK" | "R_RF" | "R_RPART" | "R_SVM" | "R_TREE_CLASS" | "R_TREE_REGR" | "QSAR_TOOLBOX";
    /** @enum {string} */
    ModelVisibility: "PUBLIC" | "ORG_SHARED" | "PRIVATE";
    Library: {
      /** Format: int64 */
      id?: number;
      /** @example Library Name */
      name: string;
      /** @example 1.24.0 */
      version: string;
      /**
       * Format: date-time
       * @description The date and time when the feature was created.
       * @example 2023-01-01T12:00:00Z
       */
      createdAt?: Record<string, never>;
      /**
       * @description The date and time when the feature was last updated.
       * @example 2023-01-01T12:00:00Z
       */
      updatedAt?: Record<string, never>;
    };
    Feature: {
      /**
       * Format: int64
       * @example 1
       */
      id?: number;
      /** @description A JSON object containing meta information. */
      meta?: {
        [key: string]: Record<string, never>;
      };
      /**
       * @description A key that must start with a letter, followed by any combination of letters, digits, hyphens, or underscores. For example, 'abc123', 'abc-test', or 'Abc_test'. It cannot start with a digit.
       * @example feature-key
       */
      key: string;
      /**
       * @description A name for the feature that will appear on top of the form field
       * @example A feature name
       */
      name: string;
      /**
       * @description A name for the feature that will appear on top of the form field
       * @example A feature unit
       */
      units?: string;
      description?: string;
      featureType: components["schemas"]["FeatureType"];
      /**
       * @example DEPENDENT
       * @enum {string}
       */
      featureDependency?: "DEPENDENT" | "INDEPENDENT";
      /** @example true */
      visible?: boolean;
      possibleValues?: components["schemas"]["FeaturePossibleValue"][];
      /**
       * Format: date-time
       * @description The date and time when the feature was created.
       * @example 2023-01-01T12:00:00Z
       */
      createdAt?: Record<string, never>;
      /**
       * @description The date and time when the feature was last updated.
       * @example 2023-01-01T12:00:00Z
       */
      updatedAt?: Record<string, never>;
    };
    FeaturePossibleValue: {
      /** @example value */
      key: string;
      /** @example value */
      value: string;
    };
    /**
     * @example FLOAT
     * @enum {string}
     */
    FeatureType: "INTEGER" | "FLOAT" | "CATEGORICAL" | "SMILES" | "STRING" | "TEXT";
    /**
     * @example PREDICTION
     * @enum {string}
     */
    DatasetType: "PREDICTION";
    Dataset: {
      /**
       * Format: int64
       * @example 1
       */
      id?: number;
      type: components["schemas"]["DatasetType"];
      /**
       * @example ARRAY
       * @enum {string}
       */
      entryType: "ARRAY";
      input: unknown[];
      result?: unknown[];
      /** @enum {string} */
      status?: "CREATED" | "EXECUTING" | "FAILURE" | "SUCCESS";
      failureReason?: string;
      userId?: string;
      /** Format: int64 */
      modelId?: number;
      modelName?: string;
      executedAt?: Record<string, never>;
      executionFinishedAt?: Record<string, never>;
      createdAt?: Record<string, never>;
      updatedAt?: Record<string, never>;
    };
    DatasetCSV: {
      /**
       * Format: int64
       * @example 1
       */
      id?: number;
      type: components["schemas"]["DatasetType"];
      /**
       * Format: byte
       * @description A base64 representation in CSV format of the input values.
       */
      inputFile: string;
      values?: unknown[];
      /** @enum {string} */
      status?: "CREATED" | "EXECUTING" | "FAILURE" | "SUCCESS";
      failureReason?: string;
      /** Format: int64 */
      modelId?: number;
      modelName?: string;
      executedAt?: Record<string, never>;
      executionFinishedAt?: Record<string, never>;
      createdAt?: Record<string, never>;
      updatedAt?: Record<string, never>;
    };
    Organization: {
      /** Format: int64 */
      id?: number;
      /** @example my-awesome-org */
      name: string;
      creatorId?: string;
      visibility: components["schemas"]["OrganizationVisibility"];
      /** @example An awesome organization for managing models. */
      description?: string;
      userIds?: string[];
      /** @example contact@my-awesome-org.com */
      contactEmail: string;
      /** @example +1234567890 */
      contactPhone?: string;
      /** @example http://www.my-awesome-org.com */
      website?: string;
      /** @example 123 Organization St., City, Country */
      address?: string;
      /** @description If the current user can edit the organization */
      canEdit?: boolean;
      created_at?: Record<string, never>;
      updated_at?: Record<string, never>;
    };
    /** @enum {string} */
    OrganizationVisibility: "PUBLIC" | "PRIVATE";
    OrganizationInvitation: {
      /**
       * Format: uuid
       * @description ID of the invitation
       */
      id?: string;
      /** @description The user id associated with that invitation */
      userId?: string;
      /**
       * Format: email
       * @description Email address of the invited user
       */
      userEmail: string;
      /**
       * @description Status of the invitation
       * @enum {string}
       */
      status: "PENDING" | "REJECTED" | "ACCEPTED";
      /** @description Expiration date of the invitation */
      expirationDate: Record<string, never>;
    };
    /** User */
    User: {
      id: string;
      name?: string;
      emailVerified?: boolean;
    };
    ErrorResponse: {
      /** @description Error message */
      message?: string;
      /** @description Error code */
      code?: number;
    };
    /** @enum {string} */
    ErrorCode: "1001";
    /** @description Can be any value - string, number, boolean, array or object. */
    AnyValue: unknown;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Validate JWT
   * @description Validate a JWT token
   */
  validateJWT: {
    responses: {
      /** @description JWT is valid */
      200: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
    };
  };
  /** Create a new model */
  createModel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Model"];
      };
    };
    responses: {
      /** @description Model created successfully */
      201: {
        content: never;
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
    };
  };
  /** Get paginated models */
  getModels: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
    };
    responses: {
      /** @description Paginated list of models */
      200: {
        content: {
          "application/json": {
            content?: components["schemas"]["ModelSummary"][];
            totalElements?: number;
            totalPages?: number;
            pageSize?: number;
            pageNumber?: number;
          };
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
    };
  };
  /** Search for models */
  searchModels: {
    parameters: {
      query: {
        query: string;
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description Paginated list of models */
      200: {
        content: {
          "application/json": {
            content?: components["schemas"]["ModelSummary"][];
            totalElements?: number;
            totalPages?: number;
            pageSize?: number;
            pageNumber?: number;
          };
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
    };
  };
  /** Get paginated shared models */
  getSharedModels: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        organizationId?: number;
      };
    };
    responses: {
      /** @description Paginated list of shared models */
      200: {
        content: {
          "application/json": {
            content?: components["schemas"]["ModelSummary"][];
            totalElements?: number;
            totalPages?: number;
            pageSize?: number;
            pageNumber?: number;
          };
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
    };
  };
  /**
   * Get a Model
   * @description Retrieve a single model by its ID
   */
  getModelById: {
    parameters: {
      path: {
        /** @description The ID of the model to retrieve */
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
      /** @description Model not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete a Model
   * @description Delete a single model by its ID
   */
  deleteModelById: {
    parameters: {
      path: {
        /** @description The ID of the model to delete */
        id: number;
      };
    };
    responses: {
      /** @description Model deleted successfully */
      204: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get a legacy model
   * @description Retrieve a single model by its ID
   */
  getLegacyModelById: {
    parameters: {
      path: {
        /** @description The ID of the model to retrieve */
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
      /** @description Model not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Predict with Model
   * @description Submit a dataset for prediction using a specific model
   */
  predictWithModel: {
    parameters: {
      path: {
        /** @description The ID of the model to use for prediction */
        modelId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Dataset"];
      };
    };
    responses: {
      /** @description Prediction created successfully */
      201: {
        content: never;
      };
      /** @description Invalid Request */
      400: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Predict using CSV with Model
   * @description Submit a dataset for prediction using a specific model
   */
  predictWithModelCSV: {
    parameters: {
      path: {
        /** @description The ID of the model to use for prediction */
        modelId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatasetCSV"];
      };
    };
    responses: {
      /** @description Prediction created successfully */
      201: {
        content: never;
      };
      /** @description Invalid Request */
      400: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /** Partially update specific fields of a model */
  partiallyUpdateModel: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string;
          visibility: components["schemas"]["ModelVisibility"];
          sharedWithOrganizationIds?: number[];
          affiliatedOrganizationIds?: number[];
        };
      };
    };
    responses: {
      /** @description Model fields updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update a feature for a specific model
   * @description Update the name, description, and feature type of an existing feature within a specific model
   */
  partiallyUpdateModelFeature: {
    parameters: {
      path: {
        /** @description The ID of the model containing the feature */
        modelId: number;
        /** @description The ID of the feature to update */
        featureId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description A name for the feature that will appear on top of the form field
           * @example Updated Feature Name
           */
          name: string;
          /**
           * @description The units that this feature is using
           * @example mg/L
           */
          units?: string;
          /** @example An updated description for this feature */
          description?: string;
          featureType: components["schemas"]["FeatureType"];
          possibleValues?: components["schemas"]["FeaturePossibleValue"][];
        };
      };
    };
    responses: {
      /** @description Feature updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Model or feature not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get Datasets by User ID
   * @description Retrieve all datasets associated with a specific user ID
   */
  getDatasets: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            content?: components["schemas"]["Dataset"][];
            totalElements?: number;
            totalPages?: number;
            pageSize?: number;
            pageNumber?: number;
          };
        };
      };
      /** @description User or datasets not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get a Dataset
   * @description Retrieve a single dataset by its ID
   */
  getDatasetById: {
    parameters: {
      path: {
        /** @description The ID of the dataset to retrieve */
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Dataset"];
        };
      };
      /** @description Model not found */
      404: {
        content: never;
      };
    };
  };
  /** Get all organizations for a specific user */
  getAllOrganizationsForUser: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"][];
        };
      };
    };
  };
  /** Create a new organization */
  createOrganization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Organization"];
      };
    };
    responses: {
      /** @description Organization created successfully */
      201: {
        content: never;
      };
    };
  };
  /** Get all user organizations */
  getAllOrganizationsByUser: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"][];
        };
      };
    };
  };
  /** Partially update an existing organization */
  partialUpdateOrganization: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string;
          /** Format: email */
          contactEmail: string;
          visibility: components["schemas"]["OrganizationVisibility"];
        };
      };
    };
    responses: {
      /** @description Organization updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Organization not found */
      404: {
        content: never;
      };
    };
  };
  /** Get organization by name */
  getOrganizationByName: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Organization not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all invitations for an organization
   * @description This endpoint allows an organization admin to get all invitations for their organization.
   */
  getAllInvitations: {
    parameters: {
      path: {
        /** @description Name of the organization */
        orgName: string;
      };
    };
    responses: {
      /** @description Invitations retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"][];
        };
      };
      /** @description Bad request, invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unauthorized, only admins can access this endpoint */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Organization not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create new invitations for an organization
   * @description This endpoint allows an organization admin to create new invitations for users.
   */
  createInvitations: {
    parameters: {
      path: {
        /** @description Name of the organization */
        orgName: string;
      };
    };
    /** @description Invitation request payload */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description List of email addresses to invite
           * @example [
           *   "user1@example.com",
           *   "user2@example.com"
           * ]
           */
          emails?: string[];
        };
      };
    };
    responses: {
      /** @description Invitations created successfully */
      201: {
        content: never;
      };
      /** @description Bad request, invalid input */
      400: {
        content: never;
      };
      /** @description Unauthorized, only admins can create invitations */
      401: {
        content: never;
      };
      /** @description Too many requests, rate limit exceeded */
      429: {
        content: never;
      };
    };
  };
  /**
   * Resend an invitation email
   * @description This endpoint allows an organization admin to resend an invitation email if it has not expired. Only organization admins can access this endpoint.
   */
  resendInvitation: {
    parameters: {
      path: {
        /** @description ID of the organization */
        orgId: number;
        /** @description ID of the invitation */
        id: string;
      };
    };
    responses: {
      /** @description Invitation resent successfully */
      200: {
        content: never;
      };
      /** @description Bad request, invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unauthorized, only organization admins can access this endpoint */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Organization or invitation not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Gone, the invitation has expired */
      410: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get all models affiliated with an organization
   * @description This endpoint allows users to retrieve all models affiliated with a specific organization.
   */
  getAllAffiliatedModels: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        /** @description Name of the organization */
        orgName: string;
      };
    };
    responses: {
      /** @description Models retrieved successfully */
      200: {
        content: {
          "application/json": {
            content?: components["schemas"]["ModelSummary"][];
            totalElements?: number;
            totalPages?: number;
            pageSize?: number;
            pageNumber?: number;
          };
        };
      };
      /** @description Bad request, invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unauthorized, only authenticated users can access this endpoint */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Organization not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get the status of an invitation
   * @description This endpoint allows a user to check the status of an invitation.
   */
  getInvitation: {
    parameters: {
      path: {
        /** @description Name of the organization */
        name: string;
        /** @description UUID of the invitation */
        uuid: string;
      };
    };
    responses: {
      /** @description Invitation status retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"];
        };
      };
      /** @description Bad request, invalid input */
      400: {
        content: never;
      };
      /** @description Invitation not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update the status of an invitation
   * @description This endpoint allows a user to update the status of an invitation.
   */
  updateInvitation: {
    parameters: {
      path: {
        /** @description Name of the organization */
        name: string;
        /** @description UUID of the invitation */
        uuid: string;
      };
    };
    /** @description Invitation status update payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvitation"];
      };
    };
    responses: {
      /** @description Invitation status updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"];
        };
      };
      /** @description Bad request, invalid input */
      400: {
        content: never;
      };
      /** @description Invitation not found */
      404: {
        content: never;
      };
    };
  };
}
